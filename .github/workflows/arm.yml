# This file is derived from the github actions cppcmake file provided by SCCN.
# Modifications were made to compile for ARM.
# Modifications are annotated with comments.

name: ARM CI

on:
  push:
    branches: ['*']
    tags: 
    paths_ignore: ['docs/**', '.travis.yml']
  pull_request:
  release:
    types: ['created']
  workflow_dispatch:
    inputs:
      cmakeextra:
        description: 'Extra CMake options'
        required: false
        default: ''

defaults:
  run:
    shell: bash


jobs:
  build:
    name: ${{ matrix.config.name }}
    # Add environment variable in order to execute commands in correct container
    # All following shell commands that need to be executed on a (simulated) ARM
    # CPU are extended with a prefix $D so that they are executed on ARM.  The
    # VERBOSE=1 because cmake should not have make hide the commands
    env:
      D: docker run --rm -i -v ${{github.workspace}}:${{github.workspace}} --env VERBOSE=1 --workdir ${{github.workspace}} tobiasherzke/docker-buildenv:liblsl_${{matrix.config.cpu}}-linux-gcc-7
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
        # All SCCN targets are removed. Only compile for ARM CPUs.
        - {name: "ubuntu-18.04", os: "ubuntu-18.04", cpu: "armv7"}
        - {name: "ubuntu-18.04", os: "ubuntu-18.04", cpu: "aarch64"}
    
    steps:
    - uses: actions/checkout@v2
    # Install qemu support for ARM CPUs and test execution in ARM container.
    - name: Prepare to run commands in docker container for ARM CPU
      run: |
           uname -a
           systemctl status binfmt-support || true
           sudo apt-get -y update
           sudo apt-get -y install qemu-user-static
           git clone https://github.com/computermouth/qemu-static-conf.git
           sudo mkdir -p /lib/binfmt.d
           sudo cp qemu-static-conf/*.conf /lib/binfmt.d/
           rm -rf qemu-static-conf
           sudo systemctl restart systemd-binfmt.service
           systemctl status binfmt-support
           $D uname -a
    - name: Configure CMake
      # Turned off building of tests and examples:
      run: |
           $D cmake --version
           $D cmake -S . -B build \
                -DCMAKE_BUILD_TYPE=Release \
                -DCMAKE_INSTALL_PREFIX=${PWD}/install \
                -DLSL_UNITTESTS=OFF \
                -DLSL_BUILD_EXAMPLES=OFF \
                -DCPACK_PACKAGE_DIRECTORY=${PWD}/package \
                -Dlslgitrevision=${{ github.sha }} \
                -Dlslgitbranch=${{ github.ref }} \
                ${{ matrix.config.cmake_extra }} 
    - name: make
      run: $D cmake --build build --config Release -j --target install
  
    - name: package
      run: |
           $D echo $GITHUB_REF
           $D cmake --build build --config Release -j --target package
           # On Debian / Ubuntu the dependencies can only be resolved for
           # already installed packages. Therefore, we have built all
           # packages without dependencies in the previous step,
           # install them and rebuild them with dependency discovery enabled
           if [[ "${{ matrix.config.os }}" == ubuntu-* ]]; then
              $D cmake -DCPACK_DEBIAN_PACKAGE_SHLIBDEPS=ON .
              # following two commands must execute in same container instance
              $D bash -c "dpkg -i package/*.deb && cmake --build build --config Release -j --target package"
           fi
           $D cmake -E remove_directory package/_CPack_Packages
    - name: upload install dir
      uses: actions/upload-artifact@master
      with:
        name: build-${{ matrix.config.name }}
        path: install

    - name: upload package
      uses: actions/upload-artifact@master
      with:
        name: pkg-${{ matrix.config.name }}
        path: package

    # Unit tests and network config removed.

    - name: upload to release page
      if: github.event_name == 'release'
      env:
        TOKEN: "token ${{ secrets.GITHUB_TOKEN }}"
        TAG: ${{ github.event.release.tag_name }}
        UPLOAD_URL: ${{ github.event.release.upload_url }}
      run: |
              # Do try this at home! The REST API is documented at
              # https://docs.github.com/en/free-pro-team@latest/rest and you can get a personal
              # access token at https://github.com/settings/tokens
              # (set TOKEN to "bearer abcdef1234")
              # you can get the UPLOAD_URL with a short bash snippet; make sure to set the env var TAG:
              # UPLOAD_URL=$(curl -H 'Accept: application/vnd.github.v3+json' $GITHUB_API_URL/repos/$GITHUB_REPOSITORY/releases/tags/$TAG | jq -r .upload_url)
              UPLOAD_URL=${UPLOAD_URL%\{*} # remove "{name,label}" suffix
              for pkg in package/*.*; do
                NAME=$(basename $pkg)
                MIME=$(file --mime-type $pkg|cut -d ' ' -f2)
                curl -X POST -H "Accept: application/vnd.github.v3+json" -H "Authorization: $TOKEN" -H "Content-Type: $MIME" --data-binary @$pkg $UPLOAD_URL?name=$NAME
              done
