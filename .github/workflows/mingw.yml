# This file is derived from the github actions cppcmake file provided by SCCN.
# Modifications were made to compile for MinGW
# Modifications are annotated with comments.

name: MinGW CI

on:
  push:
    branches: ['*']
    tags: 
    paths_ignore: ['docs/**', '.travis.yml']
  pull_request:
  release:
    types: ['created']
  workflow_dispatch:
    inputs:
      cmakeextra:
        description: 'Extra CMake options'
        required: false
        default: ''

defaults:
  run:
    # We use msys to compile with mingw
    shell: msys2 {0}


jobs:
  build:
    name: ${{ matrix.config.name }}
    # cmake should not have make hide the commands
    env:
      VERBOSE: 1
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
        # Removed all options covered by cppcmake.yml, replaced with MinGW target
        - {name: "windows",  os: "windows-latest", cmake_extra: "-G'MSYS Makefiles'"}
    
    steps:
    - uses: actions/checkout@v2
    # We use the preinstalled msys2 on the github actions windows runner.
    - uses: msys2/setup-msys2@v2
      with:
        release: false
    - name: Configure CMake
      # Turned off building of tests and examples:
      run: |
           cmake --version
           cmake -S . -B build \
                -DCMAKE_BUILD_TYPE=Release \
                -DCMAKE_INSTALL_PREFIX=${PWD}/install \
                -DLSL_UNITTESTS=OFF \
                -DLSL_BUILD_EXAMPLES=OFF \
                -DCPACK_PACKAGE_DIRECTORY=${PWD}/package \
                -Dlslgitrevision=${{ github.sha }} \
                -Dlslgitbranch=${{ github.ref }} \
                ${{ matrix.config.cmake_extra }} 
    - name: make
      run: cmake --build build --config Release -j --target install
  
    - name: package
      run: |
           echo $GITHUB_REF
           cmake --build build --config Release -j --target package
           # On Debian / Ubuntu the dependencies can only be resolved for
           # already installed packages. Therefore, we have built all
           # packages without dependencies in the previous step,
           # install them and rebuild them with dependency discovery enabled
           if [[ "${{ matrix.config.os }}" == ubuntu-* ]]; then
              cmake -DCPACK_DEBIAN_PACKAGE_SHLIBDEPS=ON .
              sudo dpkg -i package/*.deb
              cmake --build build --config Release -j --target package
           fi
           cmake -E remove_directory package/_CPack_Packages
    - name: upload install dir
      uses: actions/upload-artifact@master
      with:
        name: build-${{ matrix.config.name }}
        path: install

    - name: upload package
      uses: actions/upload-artifact@master
      with:
        name: pkg-${{ matrix.config.name }}
        path: package
    - name: print network config
      run: |
           which ifconfig && ifconfig
           if [ `which ip` ]; then
              ip link
              ip addr
              ip route
              ip -6 route
           fi

    # Unit tests removed.

    - name: upload to release page
      if: github.event_name == 'release'
      env:
        TOKEN: "token ${{ secrets.GITHUB_TOKEN }}"
        TAG: ${{ github.event.release.tag_name }}
        UPLOAD_URL: ${{ github.event.release.upload_url }}
      run: |
              # Do try this at home! The REST API is documented at
              # https://docs.github.com/en/free-pro-team@latest/rest and you can get a personal
              # access token at https://github.com/settings/tokens
              # (set TOKEN to "bearer abcdef1234")
              # you can get the UPLOAD_URL with a short bash snippet; make sure to set the env var TAG:
              # UPLOAD_URL=$(curl -H 'Accept: application/vnd.github.v3+json' $GITHUB_API_URL/repos/$GITHUB_REPOSITORY/releases/tags/$TAG | jq -r .upload_url)
              UPLOAD_URL=${UPLOAD_URL%\{*} # remove "{name,label}" suffix
              for pkg in package/*.*; do
                NAME=$(basename $pkg)
                MIME=$(file --mime-type $pkg|cut -d ' ' -f2)
                curl -X POST -H "Accept: application/vnd.github.v3+json" -H "Authorization: $TOKEN" -H "Content-Type: $MIME" --data-binary @$pkg $UPLOAD_URL?name=$NAME
              done
